{
    "docs": [
        {
            "location": "/", 
            "text": "Grasshopper Developers Guide\n\n\nIntroduction\n\n\nWelcome to Grasshopper, the world's greatest CMS.  As a developer, when you create a project using Grasshopper you will be making use of the Grasshopper API, in conjunction with NodeJS and probably ExpressJS too.  These docs are intended to explain the basic principles and usage cases of developing a Web App using Grasshoppper.\nWe will take you through the following:\n\n\nInstallation\n\n\nInstalling grasshopper is done through NPM: \nGrasshopper core handles the connection to the database and your queries.\n\nnpm install grasshopper-core\n\nGrasshopper API is what developers interact with, as a wrapper for Grasshopper core. Grasshopper core is a dependency of Grasshopper API.\n\nnpm install grasshopper-api\n\n\nApplication structure\n\n\nGrasshopper uses configuration files in your application to run. Let's see how your application will look starting from scratch:\n\n\n\n\npackage.json\n\n\napplication\n\n\ngrasshopper-config.json\n\n\napp.js\n\n\nusers.js\n\n\n\n\n\n\nnode_modules\n\n\n{various dependencs}\n\n\n\n\n\n\n\n\nSetting up the Admin User\n\n\nTo start using grasshopper, you'll have to set up an admin user. Admin users are configured in the following way:\n\n\n{\n    _id: ObjectID('arbitrary id string (numeric?)'),\n    role: 'admin',\n    enabled: true,\n    firstname: 'Test',\n    lastname: 'User',\n    identities: {\n        basic: {\n            username: 'admin',\n            salt: 'd41d8cd98f00b204e9800998ecf8427e',\n            hash: '67a74306b06d0c01624fe0d0249a570f4d093747'\n        }\n    },\n    displayName : 'admin',\n    linkedIdentities : ['basic'],\n    email: 'email@email.com'\n}\n\n\n\n\nSee this page for a breakdown on the user object.\n\n\nConfiguration\n\n\nConfiguring grasshopper is simple, just add your environment configs.\n\n\nSee this page for a breakdown of each of the configuration objects.\n\n\nStartup\n\n\nThe \ngrunt server\n task will start a local express server running the API.\n\n\n\n\n\n\n\nApp authentication\n\n\nThe Admin UI\n\n\nCreating Content / Content Types\n\n\nManaging Assets\n\n\nThe User\n\n\nMaking Queries", 
            "title": "Home"
        }, 
        {
            "location": "/#grasshopper-developers-guide", 
            "text": "", 
            "title": "Grasshopper Developers Guide"
        }, 
        {
            "location": "/#introduction", 
            "text": "Welcome to Grasshopper, the world's greatest CMS.  As a developer, when you create a project using Grasshopper you will be making use of the Grasshopper API, in conjunction with NodeJS and probably ExpressJS too.  These docs are intended to explain the basic principles and usage cases of developing a Web App using Grasshoppper.\nWe will take you through the following:", 
            "title": "Introduction"
        }, 
        {
            "location": "/#installation", 
            "text": "Installing grasshopper is done through NPM: \nGrasshopper core handles the connection to the database and your queries. npm install grasshopper-core \nGrasshopper API is what developers interact with, as a wrapper for Grasshopper core. Grasshopper core is a dependency of Grasshopper API. npm install grasshopper-api", 
            "title": "Installation"
        }, 
        {
            "location": "/#application-structure", 
            "text": "Grasshopper uses configuration files in your application to run. Let's see how your application will look starting from scratch:   package.json  application  grasshopper-config.json  app.js  users.js    node_modules  {various dependencs}", 
            "title": "Application structure"
        }, 
        {
            "location": "/#setting-up-the-admin-user", 
            "text": "To start using grasshopper, you'll have to set up an admin user. Admin users are configured in the following way:  {\n    _id: ObjectID('arbitrary id string (numeric?)'),\n    role: 'admin',\n    enabled: true,\n    firstname: 'Test',\n    lastname: 'User',\n    identities: {\n        basic: {\n            username: 'admin',\n            salt: 'd41d8cd98f00b204e9800998ecf8427e',\n            hash: '67a74306b06d0c01624fe0d0249a570f4d093747'\n        }\n    },\n    displayName : 'admin',\n    linkedIdentities : ['basic'],\n    email: 'email@email.com'\n}  See this page for a breakdown on the user object.", 
            "title": "Setting up the Admin User"
        }, 
        {
            "location": "/#configuration", 
            "text": "Configuring grasshopper is simple, just add your environment configs.  See this page for a breakdown of each of the configuration objects.", 
            "title": "Configuration"
        }, 
        {
            "location": "/#startup", 
            "text": "The  grunt server  task will start a local express server running the API.", 
            "title": "Startup"
        }, 
        {
            "location": "/#app-authentication", 
            "text": "", 
            "title": "App authentication"
        }, 
        {
            "location": "/#the-admin-ui", 
            "text": "", 
            "title": "The Admin UI"
        }, 
        {
            "location": "/#creating-content-content-types", 
            "text": "", 
            "title": "Creating Content / Content Types"
        }, 
        {
            "location": "/#managing-assets", 
            "text": "", 
            "title": "Managing Assets"
        }, 
        {
            "location": "/#the-user", 
            "text": "", 
            "title": "The User"
        }, 
        {
            "location": "/#making-queries", 
            "text": "", 
            "title": "Making Queries"
        }, 
        {
            "location": "/installation/", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/configs/", 
            "text": "Configs\n\n\nWhen starting grasshopper api, you must call it with your configs:\n\n\nconst configs = require('./configs');\nconst ghApi = require('grasshopper-api');\n\nvar results = ghApi(configs);\n\n\n\n\nThe following configs can be passed to \ngrasshopper-api\n:\n\n\n\n\nserver\n\n\nthis can be left out altogether or passed in as an object\n\n\nserver.proxy\n if \nserver.proxy === true\n then a router will be returned from initializing grasshopper api, and no standalone express app will be created. This is meant to be used in the case you have an express app you want to mount the grasshopper api router on.\n\n\nserver.https\n truthy if grassopper should handle SSL - this is only meant for dev envirnoments. Nginx or Apache should handle SSL on production / staging. \nserver.https\n should be an object if it is truthy.\n\n\nserver.https.key\n relative path to ssl key from \nprocess.cwd()\n\n\nserver.https.cert\n relative path too ssl cert file from \nprocess.cwd()\n \n\n\n\n\n\n\nsessions\n \n\n\nset to truthy if you want cookies managed sessions\n\n\ndefault: \nundefined", 
            "title": "Configuration"
        }, 
        {
            "location": "/configs/#configs", 
            "text": "When starting grasshopper api, you must call it with your configs:  const configs = require('./configs');\nconst ghApi = require('grasshopper-api');\n\nvar results = ghApi(configs);  The following configs can be passed to  grasshopper-api :   server  this can be left out altogether or passed in as an object  server.proxy  if  server.proxy === true  then a router will be returned from initializing grasshopper api, and no standalone express app will be created. This is meant to be used in the case you have an express app you want to mount the grasshopper api router on.  server.https  truthy if grassopper should handle SSL - this is only meant for dev envirnoments. Nginx or Apache should handle SSL on production / staging.  server.https  should be an object if it is truthy.  server.https.key  relative path to ssl key from  process.cwd()  server.https.cert  relative path too ssl cert file from  process.cwd()      sessions    set to truthy if you want cookies managed sessions  default:  undefined", 
            "title": "Configs"
        }, 
        {
            "location": "/concepts/app-auth/", 
            "text": "", 
            "title": "App authentication"
        }, 
        {
            "location": "/concepts/admin-ui/", 
            "text": "", 
            "title": "The Admin UI"
        }, 
        {
            "location": "/concepts/content/", 
            "text": "", 
            "title": "Content / Content Types"
        }, 
        {
            "location": "/concepts/assets/", 
            "text": "", 
            "title": "Managing Assets"
        }, 
        {
            "location": "/usage/user/", 
            "text": "", 
            "title": "The User Object"
        }, 
        {
            "location": "/usage/queries/", 
            "text": "Queries\n\n\nGrasshopper's query builder accepts a query object that contains several parameters, some optional.\n\n\nThe returned object is an array with limit, skip and total. The total is the value of all content matched by query, not just returned objects.\n\n\nDefinitions for all possible query parameters/options\n\n\nfilters\n\n\nAn array of optional filter objects for the query.\n\n\n\n\nkey: The key of the content being filtered.\n\n\ncmp: The comparison operator for the filter value. Currently supported operators (Query accepts symbol or string value):\n\n\n'=': equals\n\n\n'!=' or 'not' or 'notequal' or 'notequals': not equal to\n\n\n'\n=' or 'gte': greater than or equals\n\n\n'\n' or 'gt': great  ser than\n\n\n'\n=' or 'lte': less than or equals\n\n\n'\n' or 'lt': less than\n\n\n'in' or 'contains': contains\n\n\n'!in' or 'notin' or 'notcontains': does not contain\n\n\n'%' or 'like': like (Allows for 'fuzzy matching')\n\n\n'!%' or 'notlike': not like (Allows for 'fuzzy matching')\n\n\n'between': between\n\n\n'notbetween': not between\n\n\n'size': size\n\n\n'exists': exists\n\n\n\n\nvalue\n\n\nThen value the filter will be compared with.\n\n\ntypes\n\n\nAn optional array of content type ids.\n\n\nnodes\n\n\nAn optional array of node ids.\n\n\noptions\n\n\nObject. Possible key/value pairs are:\n\n\n\n\nlimit : Limit number of results. String or number.\n\n\nskip : Skip specified number of results. String or number. (limit and skip support pagination)\n\n\ndistinct : return distinct results within a find. Can include types.\n\n\nexclude : array of fields to be excluded from query.\n\n\ninclude : array of fields to be included in query.\n\n\n\n\nImportant Notes\n\n\nThe options object can have include or exclude parameters, but not both in the same query.\nWhen using 'options.distinct', filters can't be used. This means paging is not available.\n\n\nExamples\n\n\nIn the following examples, \"request\" is the configured grasshopper request object\n\n\n\n\nGet a User with ID = {a valid ID}\n\n\n\n\nrequest\n        .get()\n        .users\n        .query({\n            filters: [\n                {\n                    key:'id',\n                    cmp:'=',\n                    value: {a valid ID}\n                }\n            ]\n        })\n\n\n\n\n\n\nGet a list of users with the first name \"Bob\" and were created after 01-01-2016\n\n\n\n\n request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:'firstname',\n                     cmp:'=',\n                     value: 'Bob'\n                 },\n                 {\n                     key: 'dateCreated',\n                     cmp: '\n=',\n                     value: new Date(2016,0,1,0,0,0,0)\n                 }\n             ]\n        })\n\n\n\n\n\n\nGet a list of content items with node id {NODE-ID} and sort by meta.created in descending order and limit returned results to 100\n\n\n\n\n request\n        .get()\n        .content\n        .query({\n             nodes : [{NODE-ID}],\n             options : {\n                 sort : {'meta.created': -1},\n                 limit : 100\n             }\n        })\n\n\n\n\n\n\nGet a list of content items with node id {NODE-ID} with filters\n\n\n\n\n request\n        .get()\n        .content\n        .query({\n            nodes: [{NODE-ID}],\n            filters: [{\n                key: 'contentField1',\n                cmp: '=',\n                value: ''\n            }]\n                })\n\n\n\n\n\n\nGet all pieces of content within a content type\n\n\n\n\nrequest.get()\n       .content\n       .query({\n           types : [constants.servicePageContentTypeId]\n       });\n\n\n\n\n\n\nFilter active blog posts, sort newest first, and paginate\n\n\n\n\n{\n    types: [\n        'blog-post-content-type-id'\n    ],\n    filters:[\n        {\n            key : 'fields.date',\n            cmp : '\n',\n            value : new Date()\n        }\n    ],\n    options: {\n        limit: 4,\n        skip: 8,\n        sortBy: {\n            'fields.date': -1\n        }\n    }\n}\n\n\n\n\n\n\nOptionally add year and category filters\n\n\n\n\n{\n    key : 'fields.category',\n    cmp : '=',\n    value : 'business'\n}\n{\n    key: 'fields.date',\n    cmp: 'between',\n    value: [\n        new Date(2015, 0, 1, 0, 0, 0, 0),\n        new Date(2015, 11, 31, 23, 59, 59, 999)\n    ]\n}\n\n\n\n\n\n\nFind all events in the future that are not featured and are not assigned to any of my teams, sorted by start date ascending. Don\u2019t include a bunch of the document fields in the response.\n\n\n\n\napp.ghCore.request(token.get()).content.query({\n       nodes: ['551eb85bde9a59304b5164e0'],\n       types: ['551eb735de9a59304b5164de'],\n       filters: [\n           { key: 'fields.dates.validTo', cmp: 'gte', value: new Date()},\n           { key: 'fields.featured.value', cmp: 'eq', value: false},\n           { key: 'fields.team', cmp: '!in', value: _.pluck(req.bridgetown.identity.profile.teams.concat(req.bridgetown.identity.profile.erns || []), 'id')}\n       ],\n       options: {\n           skip: req.param('skip'),\n           limit: req.param('limit'),\n           sort: 'fields.dates.validFrom',\n           exclude: [\n               'fields.additioninformation',\n               'fields.category',\n               'fields.location',\n               'fields.attendees',\n               'fields.organizer',\n               'fields.volunteeredhours',\n               'fields.approved',\n               'fields.eventfull',\n               'fields.providetshirts',\n               'fields.desiredvolunteers',\n               'fields.isongoing',\n               'fields.totalvolunteers'\n           ],\n       }\n   });\n\n\n\n\n\n\n\n\nGet list of users with first or last name, \"Flober\"\n\n\n\n\n request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:['firstname', 'lastname'],\n                     cmp:'=',\n                     value: 'Flober'\n                 }\n             ]\n        })\n\n\n\n\n\n\nGet list of users with first name starting with Fa\n\n\n\n\n request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:'firstname',\n                     cmp:'%',\n                     value: '^Fa'\n                 }\n             ]\n        })", 
            "title": "Making Queries"
        }, 
        {
            "location": "/usage/queries/#queries", 
            "text": "Grasshopper's query builder accepts a query object that contains several parameters, some optional.  The returned object is an array with limit, skip and total. The total is the value of all content matched by query, not just returned objects.  Definitions for all possible query parameters/options", 
            "title": "Queries"
        }, 
        {
            "location": "/usage/queries/#filters", 
            "text": "An array of optional filter objects for the query.   key: The key of the content being filtered.  cmp: The comparison operator for the filter value. Currently supported operators (Query accepts symbol or string value):  '=': equals  '!=' or 'not' or 'notequal' or 'notequals': not equal to  ' =' or 'gte': greater than or equals  ' ' or 'gt': great  ser than  ' =' or 'lte': less than or equals  ' ' or 'lt': less than  'in' or 'contains': contains  '!in' or 'notin' or 'notcontains': does not contain  '%' or 'like': like (Allows for 'fuzzy matching')  '!%' or 'notlike': not like (Allows for 'fuzzy matching')  'between': between  'notbetween': not between  'size': size  'exists': exists", 
            "title": "filters"
        }, 
        {
            "location": "/usage/queries/#value", 
            "text": "Then value the filter will be compared with.", 
            "title": "value"
        }, 
        {
            "location": "/usage/queries/#types", 
            "text": "An optional array of content type ids.", 
            "title": "types"
        }, 
        {
            "location": "/usage/queries/#nodes", 
            "text": "An optional array of node ids.", 
            "title": "nodes"
        }, 
        {
            "location": "/usage/queries/#options", 
            "text": "Object. Possible key/value pairs are:   limit : Limit number of results. String or number.  skip : Skip specified number of results. String or number. (limit and skip support pagination)  distinct : return distinct results within a find. Can include types.  exclude : array of fields to be excluded from query.  include : array of fields to be included in query.", 
            "title": "options"
        }, 
        {
            "location": "/usage/queries/#important-notes", 
            "text": "The options object can have include or exclude parameters, but not both in the same query.\nWhen using 'options.distinct', filters can't be used. This means paging is not available.", 
            "title": "Important Notes"
        }, 
        {
            "location": "/usage/queries/#examples", 
            "text": "In the following examples, \"request\" is the configured grasshopper request object   Get a User with ID = {a valid ID}   request\n        .get()\n        .users\n        .query({\n            filters: [\n                {\n                    key:'id',\n                    cmp:'=',\n                    value: {a valid ID}\n                }\n            ]\n        })   Get a list of users with the first name \"Bob\" and were created after 01-01-2016    request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:'firstname',\n                     cmp:'=',\n                     value: 'Bob'\n                 },\n                 {\n                     key: 'dateCreated',\n                     cmp: ' =',\n                     value: new Date(2016,0,1,0,0,0,0)\n                 }\n             ]\n        })   Get a list of content items with node id {NODE-ID} and sort by meta.created in descending order and limit returned results to 100    request\n        .get()\n        .content\n        .query({\n             nodes : [{NODE-ID}],\n             options : {\n                 sort : {'meta.created': -1},\n                 limit : 100\n             }\n        })   Get a list of content items with node id {NODE-ID} with filters    request\n        .get()\n        .content\n        .query({\n            nodes: [{NODE-ID}],\n            filters: [{\n                key: 'contentField1',\n                cmp: '=',\n                value: ''\n            }]\n                })   Get all pieces of content within a content type   request.get()\n       .content\n       .query({\n           types : [constants.servicePageContentTypeId]\n       });   Filter active blog posts, sort newest first, and paginate   {\n    types: [\n        'blog-post-content-type-id'\n    ],\n    filters:[\n        {\n            key : 'fields.date',\n            cmp : ' ',\n            value : new Date()\n        }\n    ],\n    options: {\n        limit: 4,\n        skip: 8,\n        sortBy: {\n            'fields.date': -1\n        }\n    }\n}   Optionally add year and category filters   {\n    key : 'fields.category',\n    cmp : '=',\n    value : 'business'\n}\n{\n    key: 'fields.date',\n    cmp: 'between',\n    value: [\n        new Date(2015, 0, 1, 0, 0, 0, 0),\n        new Date(2015, 11, 31, 23, 59, 59, 999)\n    ]\n}   Find all events in the future that are not featured and are not assigned to any of my teams, sorted by start date ascending. Don\u2019t include a bunch of the document fields in the response.   app.ghCore.request(token.get()).content.query({\n       nodes: ['551eb85bde9a59304b5164e0'],\n       types: ['551eb735de9a59304b5164de'],\n       filters: [\n           { key: 'fields.dates.validTo', cmp: 'gte', value: new Date()},\n           { key: 'fields.featured.value', cmp: 'eq', value: false},\n           { key: 'fields.team', cmp: '!in', value: _.pluck(req.bridgetown.identity.profile.teams.concat(req.bridgetown.identity.profile.erns || []), 'id')}\n       ],\n       options: {\n           skip: req.param('skip'),\n           limit: req.param('limit'),\n           sort: 'fields.dates.validFrom',\n           exclude: [\n               'fields.additioninformation',\n               'fields.category',\n               'fields.location',\n               'fields.attendees',\n               'fields.organizer',\n               'fields.volunteeredhours',\n               'fields.approved',\n               'fields.eventfull',\n               'fields.providetshirts',\n               'fields.desiredvolunteers',\n               'fields.isongoing',\n               'fields.totalvolunteers'\n           ],\n       }\n   });   Get list of users with first or last name, \"Flober\"    request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:['firstname', 'lastname'],\n                     cmp:'=',\n                     value: 'Flober'\n                 }\n             ]\n        })   Get list of users with first name starting with Fa    request\n        .get()\n        .users\n        .query({\n            filters: [\n                 {\n                     key:'firstname',\n                     cmp:'%',\n                     value: '^Fa'\n                 }\n             ]\n        })", 
            "title": "Examples"
        }
    ]
}